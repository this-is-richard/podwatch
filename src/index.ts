import * as k8s from "@kubernetes/client-node";
import { ChildProcess, spawn } from "child_process";
import { app, BrowserWindow, ipcMain } from "electron";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Global variables for log streaming
let currentLogProcess: ChildProcess | null = null;
let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Handle IPC for getting contexts
ipcMain.handle("get-contexts", async () => {
  const kc = new k8s.KubeConfig();
  kc.loadFromDefault();
  const contexts = kc.getContexts().map((ctx) => ({
    name: ctx.name,
    cluster: ctx.cluster,
    user: ctx.user,
  }));
  return { contexts, currentContext: kc.currentContext };
});

// Handle IPC for switching context
ipcMain.handle("switch-context", async (event, contextName) => {
  const kc = new k8s.KubeConfig();
  kc.loadFromDefault();
  kc.setCurrentContext(contextName);
  return { success: true, currentContext: kc.currentContext };
});

// Handle IPC for getting pods
ipcMain.handle("get-pods", async (event, contextName) => {
  try {
    const kc = new k8s.KubeConfig();
    kc.loadFromDefault();

    // Switch to the specified context if provided
    if (contextName) {
      kc.setCurrentContext(contextName);
    }

    const k8sApi = kc.makeApiClient(k8s.CoreV1Api);
    const podListResponse = await k8sApi.listPodForAllNamespaces();

    const pods =
      podListResponse?.items?.map((pod) => ({
        name: pod.metadata?.name || "",
        namespace: pod.metadata?.namespace || "",
        status: pod.status?.phase || "Unknown",
        ready:
          pod.status?.containerStatuses?.every(
            (cs: k8s.V1ContainerStatus) => cs.ready
          ) || false,
        restarts:
          pod.status?.containerStatuses?.reduce(
            (sum: number, cs: k8s.V1ContainerStatus) =>
              sum + (cs.restartCount || 0),
            0
          ) || 0,
        age: pod.metadata?.creationTimestamp
          ? Math.floor(
              (Date.now() -
                new Date(pod.metadata.creationTimestamp).getTime()) /
                (1000 * 60 * 60 * 24)
            )
          : 0,
        node: pod.spec?.nodeName || "Unknown",
      })) || [];

    return { success: true, pods };
  } catch (error) {
    console.error("Error getting pods:", error);
    return { success: false, error: error.message, pods: [] };
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Handle IPC for streaming logs
ipcMain.handle("stream-logs", async (event, podName: string) => {
  try {
    // Stop any existing process
    if (currentLogProcess) {
      currentLogProcess.kill();
      currentLogProcess = null;
    }

    // Get the current context and kubeconfig
    const kc = new k8s.KubeConfig();
    kc.loadFromDefault();

    // Use kubectl to stream logs
    const kubectlArgs = [
      "logs",
      "-f", // follow
      "--tail=100", // show last 100 lines
      podName,
    ];

    currentLogProcess = spawn("kubectl", kubectlArgs, {
      env: {
        ...process.env,
        KUBECONFIG: kc.getCurrentContext() ? undefined : process.env.KUBECONFIG,
      },
    });

    // Handle stdout (log data)
    currentLogProcess.stdout?.on("data", (chunk: Buffer) => {
      const logLine = chunk.toString();
      if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send("log-data", logLine);
      }
    });

    // Handle stderr (errors)
    currentLogProcess.stderr?.on("data", (chunk: Buffer) => {
      const errorLine = chunk.toString();
      console.error("kubectl stderr:", errorLine);
      if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send("log-data", `Error: ${errorLine}`);
      }
    });

    // Handle process end
    currentLogProcess.on("close", (code: number | null) => {
      console.log(`kubectl process exited with code ${code}`);
      currentLogProcess = null;
    });

    // Handle process error
    currentLogProcess.on("error", (error: Error) => {
      console.error("kubectl process error:", error);
      if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send(
          "log-data",
          `Process Error: ${error.message}\n`
        );
      }
      currentLogProcess = null;
    });

    return { success: true };
  } catch (error) {
    console.error("Error streaming logs:", error);
    return { success: false, error: (error as Error).message };
  }
});

// Handle IPC for stopping log stream
ipcMain.handle("stop-log-stream", async () => {
  try {
    if (currentLogProcess) {
      currentLogProcess.kill();
      currentLogProcess = null;
    }
    return { success: true };
  } catch (error) {
    console.error("Error stopping log stream:", error);
    return { success: false };
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
